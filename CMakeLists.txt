cmake_minimum_required(VERSION 3.5)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_C_STANDARD 99)
project(Granite LANGUAGES CXX C)

if (CMAKE_COMPILER_IS_GNUCXX OR (${CMAKE_CXX_COMPILER_ID} MATCHES "Clang"))
    set(GRANITE_CXX_FLAGS -Wall -Wextra -Wno-missing-field-initializers -Wno-empty-body -ffast-math)
elseif (MSVC)
    set(GRANITE_CXX_FLAGS /D_CRT_SECURE_NO_WARNINGS /wd4267 /wd4244 /wd4309 /wd4005 /MP /DNOMINMAX)
endif()

option(GRANITE_HIDDEN "Declare symbols as hidden by default." OFF)
if (GRANITE_HIDDEN)
    if (CMAKE_COMPILER_IS_GNUCXX OR (${CMAKE_CXX_COMPILER_ID} MATCHES "Clang"))
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=hidden")
        set(CMAKE_C_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=hidden")
    endif()
elseif(${GRANITE_PLATFORM} MATCHES "libretro")
    if (CMAKE_COMPILER_IS_GNUCXX OR (${CMAKE_CXX_COMPILER_ID} MATCHES "Clang"))
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=hidden")
        set(CMAKE_C_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=hidden")
    endif()
endif()

option(GRANITE_SANITIZE_ADDRESS "Sanitize address" OFF)
set(GRANITE_LINK_FLAGS)
if (GRANITE_SANITIZE_ADDRESS)
    set(GRANITE_CXX_FLAGS ${GRANITE_CXX_FLAGS} -fsanitize=address)
    set(GRANITE_LINK_FLAGS ${GRANITE_LINK_FLAGS} -fsanitize=address)
endif()

option(GRANITE_SANITIZE_THREADS "Sanitize threads" OFF)
if (GRANITE_SANITIZE_THREADS)
    set(GRANITE_CXX_FLAGS ${GRANITE_CXX_FLAGS} -fsanitize=thread)
    set(GRANITE_LINK_FLAGS ${GRANITE_LINK_FLAGS} -fsanitize=thread)
endif()

if (ANDROID)
    set(CMAKE_POSITION_INDEPENDENT_CODE ON)
endif()

if (${GRANITE_PLATFORM} MATCHES "libretro")
    set(CMAKE_POSITION_INDEPENDENT_CODE ON)
endif()

set(SKIP_GLSLANG_INSTALL ON CACHE BOOL "" FORCE)
set(SHADERC_SKIP_INSTALL ON CACHE BOOL "" FORCE)
set(ENABLE_HLSL ON CACHE BOOL "" FORCE)
set(ENABLE_OPT OFF CACHE BOOL "" FORCE)
set(ENABLE_GLSLANG_INSTALL OFF CACHE BOOL "" FORCE)
set(BUILD_SHARED_LIBS OFF CACHE BOOL "" FORCE)
set(SHADERC_THIRD_PARTY_ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/third_party" CACHE STRING "Third party path." FORCE)
set(SPIRV-Headers_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/third_party/spirv-headers" CACHE STRING "SPIRV-Headers path")
set(SHADERC_SKIP_TESTS ON)
set(FOSSILIZE_RAPIDJSON_INCLUDE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/third_party/rapidjson/include" CACHE STRING "Fossilize rapidjson path." FORCE)
set(FOSSILIZE_VULKAN_INCLUDE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/third_party/khronos/vulkan" CACHE STRING "Fossilize Vulkan path." FORCE)

add_subdirectory(third_party/shaderc EXCLUDE_FROM_ALL)
add_subdirectory(third_party/stb EXCLUDE_FROM_ALL)
add_subdirectory(third_party/spirv-cross EXCLUDE_FROM_ALL)
add_subdirectory(third_party/astc-encoder/Source EXCLUDE_FROM_ALL)
add_subdirectory(third_party/meshoptimizer EXCLUDE_FROM_ALL)
add_subdirectory(third_party/mikktspace EXCLUDE_FROM_ALL)

set(FOSSILIZE_CLI OFF CACHE BOOL "Fossilize CLI." FORCE)
set(FOSSILIZE_TESTS OFF CACHE BOOL "Fossilize tests." FORCE)
add_subdirectory(third_party/fossilize EXCLUDE_FROM_ALL)

function(add_granite_library NAME)
    add_library(${NAME} STATIC ${ARGN})
    target_compile_options(${NAME} PRIVATE ${GRANITE_CXX_FLAGS})
    if (${GRANITE_PLATFORM} MATCHES "libretro")
        set_target_properties(${NAME} PROPERTIES POSITION_INDEPENDENT_CODE ON)
    elseif (GRANITE_POSITION_INDEPENDENT)
        set_target_properties(${NAME} PROPERTIES POSITION_INDEPENDENT_CODE ON)
    elseif (ANDROID)
        set_target_properties(${NAME} PROPERTIES POSITION_INDEPENDENT_CODE ON)
    else()
        set_target_properties(${NAME} PROPERTIES POSITION_INDEPENDENT_CODE OFF)
    endif()
endfunction()

function(add_granite_executable NAME)
    if (ANDROID)
        add_library(${NAME} SHARED ${ARGN})
        target_link_libraries(${NAME} log android)
    elseif(${GRANITE_PLATFORM} MATCHES "libretro")
        add_library(${NAME} SHARED ${ARGN})
        target_link_libraries(${NAME})
        if (CMAKE_COMPILER_IS_GNUCXX OR (${CMAKE_CXX_COMPILER_ID} MATCHES "Clang"))
            set_target_properties(${NAME} PROPERTIES LINK_FLAGS "-Wl,--no-undefined")
        endif()
    else()
        add_executable(${NAME} ${ARGN})
    endif()
    target_compile_options(${NAME} PRIVATE ${GRANITE_CXX_FLAGS})
    if (GRANITE_SANITIZE_ADDRESS OR GRANITE_SANITIZE_THREADS)
        set_target_properties(${NAME} PROPERTIES LINK_FLAGS "${GRANITE_LINK_FLAGS}")
    endif()
endfunction()

function(add_granite_application TARGET_NAME)
    add_granite_executable(${TARGET_NAME} ${ARGN})
    target_link_libraries(${TARGET_NAME} math application-main)
    if (NOT ${GRANITE_PLATFORM} MATCHES "libretro")
        if (WIN32)
            if (CMAKE_COMPILER_IS_GNUCXX OR (${CMAKE_CXX_COMPILER_ID} MATCHES "Clang"))
                set_target_properties(${TARGET_NAME} PROPERTIES LINK_FLAGS -mwindows)
            else()
                set_target_properties(${TARGET_NAME} PROPERTIES LINK_FLAGS /SUBSYSTEM:Windows)
            endif()
        endif()
    endif()
endfunction()

function(add_granite_headless_application TARGET_NAME)
    add_executable(${TARGET_NAME} ${ARGN})
    target_compile_options(${TARGET_NAME} PRIVATE ${GRANITE_CXX_FLAGS})
    if (GRANITE_SANITIZE_ADDRESS OR GRANITE_SANITIZE_THREADS)
        set_target_properties(${TARGET_NAME} PROPERTIES LINK_FLAGS "${GRANITE_LINK_FLAGS}")
    endif()
    if (ANDROID)
        target_link_libraries(${TARGET_NAME} log android)
    endif()
    target_link_libraries(${TARGET_NAME} math application-headless)
    if (WIN32)
        if (CMAKE_COMPILER_IS_GNUCXX OR (${CMAKE_CXX_COMPILER_ID} MATCHES "Clang"))
            set_target_properties(${TARGET_NAME} PROPERTIES LINK_FLAGS -mwindows)
        else()
            set_target_properties(${TARGET_NAME} PROPERTIES LINK_FLAGS /SUBSYSTEM:Windows)
        endif()
    endif()
endfunction()

function(add_granite_offline_tool TARGET_NAME)
    add_granite_executable(${TARGET_NAME} ${ARGN})
    target_link_libraries(${TARGET_NAME} math vulkan-backend)
    if (NOT ${GRANITE_PLATFORM} MATCHES "libretro")
        if (WIN32)
            if (CMAKE_COMPILER_IS_GNUCXX OR (${CMAKE_CXX_COMPILER_ID} MATCHES "Clang"))
                set_target_properties(${TARGET_NAME} PROPERTIES LINK_FLAGS -mconsole)
            else()
                set_target_properties(${TARGET_NAME} PROPERTIES LINK_FLAGS /SUBSYSTEM:Console)
            endif()
        endif()
    endif()
endfunction()

add_subdirectory(compiler EXCLUDE_FROM_ALL)

add_subdirectory(third_party EXCLUDE_FROM_ALL)
add_subdirectory(threading EXCLUDE_FROM_ALL)
add_subdirectory(event EXCLUDE_FROM_ALL)
add_subdirectory(util EXCLUDE_FROM_ALL)
add_subdirectory(math EXCLUDE_FROM_ALL)
add_subdirectory(vulkan EXCLUDE_FROM_ALL)
add_subdirectory(filesystem EXCLUDE_FROM_ALL)
add_subdirectory(renderer EXCLUDE_FROM_ALL)
add_subdirectory(ui EXCLUDE_FROM_ALL)
add_subdirectory(scene_formats EXCLUDE_FROM_ALL)
add_subdirectory(audio EXCLUDE_FROM_ALL)
add_subdirectory(application EXCLUDE_FROM_ALL)

option(GRANITE_TOOLS "Build Granite tools." ON)

add_subdirectory(tests)
add_subdirectory(viewer)

if (GRANITE_TOOLS)
    add_subdirectory(tools)
endif()

add_subdirectory(network)

