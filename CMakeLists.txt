cmake_minimum_required(VERSION 3.5)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_C_STANDARD 99)
project(Granite LANGUAGES CXX C)

if (CMAKE_COMPILER_IS_GNUCXX)
	set(GRANITE_CXX_FLAGS -Wall -Wextra -pedantic -Wno-missing-field-initializers -Wno-empty-body)
elseif (MSVC)
	set(GRANITE_CXX_FLAGS /D_CRT_SECURE_NO_WARNINGS /wd4267 /wd4244 /wd4309 /wd4005 /MP /DNOMINMAX)
endif()

option(GRANITE_HIDDEN "Declare symbols as hidden by default." OFF)
if (GRANITE_HIDDEN)
    if (CMAKE_COMPILER_IS_GNUCXX)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=hidden")
        set(CMAKE_C_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=hidden")
    endif()
elseif(${GRANITE_PLATFORM} MATCHES "libretro")
    if (CMAKE_COMPILER_IS_GNUCXX)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=hidden")
        set(CMAKE_C_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=hidden")
    endif()
endif()

option(GRANITE_SANITIZE_ADDRESS "Sanitize" OFF)
if (GRANITE_SANITIZE_ADDRESS)
    set(GRANITE_CXX_FLAGS ${GRANITE_CXX_FLAGS} -fsanitize=address)
    set(GRANITE_LINK_FLAGS -fsanitize=address)
else()
    set(GRANITE_LINK_FLAGS)
endif()

option(VULKAN_WSI "Enable Vulkan WSI." ON)

if(${GRANITE_PLATFORM} MATCHES "libretro")
    set(CMAKE_POSITION_INDEPENDENT_CODE ON)
endif()

set(SHADERC_THIRD_PARTY_ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/third_party" CACHE STRING "Third party path." FORCE)
set(SPIRV-Headers_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/third_party/spirv-headers" CACHE STRING "SPIRV-Headers path")
set(SHADERC_SKIP_TESTS ON)
add_subdirectory(third_party/shaderc EXCLUDE_FROM_ALL)
add_subdirectory(third_party/stb EXCLUDE_FROM_ALL)
add_subdirectory(third_party/spirv-cross EXCLUDE_FROM_ALL)
add_subdirectory(third_party/astc-encoder/Source EXCLUDE_FROM_ALL)

function(add_granite_library NAME)
    add_library(${NAME} STATIC ${ARGN})
    target_compile_options(${NAME} PRIVATE ${GRANITE_CXX_FLAGS})
    if(${GRANITE_PLATFORM} MATCHES "libretro")
        set_target_properties(${NAME} PROPERTIES POSITION_INDEPENDENT_CODE ON)
    elseif (GRANITE_POSITION_INDEPENDENT)
        set_target_properties(${NAME} PROPERTIES POSITION_INDEPENDENT_CODE ON)
    else()
        set_target_properties(${NAME} PROPERTIES POSITION_INDEPENDENT_CODE OFF)
    endif()
endfunction()

function(add_granite_executable NAME)
    if (ANDROID)
        add_library(${NAME} SHARED ${ARGN})
        target_link_libraries(${NAME} log android)
    elseif(${GRANITE_PLATFORM} MATCHES "libretro")
        add_library(${NAME} SHARED ${ARGN})
        target_link_libraries(${NAME})
        if (CMAKE_COMPILER_IS_GNUCXX)
            set_target_properties(${NAME} PROPERTIES LINK_FLAGS "-Wl,--no-undefined")
        endif()
    else()
        add_executable(${NAME} ${ARGN})
    endif()
    target_compile_options(${NAME} PRIVATE ${GRANITE_CXX_FLAGS})
    if (SANITIZE_ADDRESS)
        set_target_properties(${NAME} PROPERTIES LINK_FLAGS ${GRANITE_LINK_FLAGS})
    endif()
endfunction()

add_subdirectory(compiler)

add_subdirectory(third_party)
add_subdirectory(event)
add_subdirectory(util)
add_subdirectory(math)
add_subdirectory(vulkan)
add_subdirectory(filesystem)
add_subdirectory(renderer)
add_subdirectory(ui)
add_subdirectory(scene_formats)
add_subdirectory(application)

function(add_granite_application TARGET_NAME)
    add_granite_executable(${TARGET_NAME} ${ARGN})
    target_link_libraries(${TARGET_NAME} math application-main)
    if (NOT ${GRANITE_PLATFORM} MATCHES "libretro")
        if (WIN32)
            if (CMAKE_COMPILER_IS_GNUCXX)
                set_target_properties(${TARGET_NAME} PROPERTIES LINK_FLAGS -mwindows)
            else()
                set_target_properties(${TARGET_NAME} PROPERTIES LINK_FLAGS /SUBSYSTEM:Windows)
            endif()
        endif()
    endif()
endfunction()

function(add_granite_offline_tool TARGET_NAME)
    add_granite_executable(${TARGET_NAME} ${ARGN})
    target_link_libraries(${TARGET_NAME} math vulkan-backend)
    if (NOT ${GRANITE_PLATFORM} MATCHES "libretro")
        if (WIN32)
            if (CMAKE_COMPILER_IS_GNUCXX)
                set_target_properties(${TARGET_NAME} PROPERTIES LINK_FLAGS -mconsole)
            else()
                set_target_properties(${TARGET_NAME} PROPERTIES LINK_FLAGS /SUBSYSTEM:Console)
            endif()
        endif()
    endif()
endfunction()

option(GRANITE_TOOLS "Build Granite tools." ON)

add_subdirectory(tests)

if (GRANITE_TOOLS)
    add_subdirectory(tools)
endif()

add_subdirectory(network)

