#version 450
layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

#include "volumetric_fog.h"

layout(push_constant, std430) uniform Registers
{
    mat4 inv_view_projection;
    vec4 z_transform;
    uvec3 count;
    vec3 inv_resolution;
    vec2 xy_scale;
    float slice_z_log2_scale;
    float density_mod;
} registers;

float to_clip_z(float world_z)
{
    vec2 zw = registers.z_transform.zw - registers.z_transform.xy * world_z;
    return zw.x / zw.y;
}

layout(rgba16f, set = 0, binding = 0) writeonly uniform image3D uDensity;
layout(std140, set = 0, binding = 1) uniform BlockExtents
{
    vec4 slice_extents[1024 / 4];
};

void main()
{
    if (any(greaterThanEqual(gl_GlobalInvocationID, registers.count)))
        return;

    vec3 uvw = (vec3(gl_GlobalInvocationID) + 0.5) * registers.inv_resolution;

    float world_z = volumetric_fog_texture_z_to_world(uvw.z, registers.slice_z_log2_scale);
    float clip_z = to_clip_z(world_z);
    vec4 clip = registers.inv_view_projection * vec4(uvw.xy * 2.0 - 1.0, clip_z, 1.0);
    vec3 pos = clip.xyz / clip.w;

    // TODO: Modulate density based on pos.
    vec3 normalized_dir = vec3(1.0, (uvw.xy * 2.0 - 1.0) * registers.xy_scale);
    float length_mod = length(normalized_dir);
    float density_extent = slice_extents[gl_WorkGroupID.z][gl_LocalInvocationID.z] * length_mod;

    imageStore(uDensity, ivec3(gl_GlobalInvocationID), vec4(vec3(0.5) * density_extent * registers.density_mod, density_extent * registers.density_mod));
}